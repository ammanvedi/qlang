
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 17 17:29:05 GMT 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 17 17:29:05 GMT 2014
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\056\003\000\002\056\003\000\002" +
    "\040\004\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\035\011\000\002\035\006" +
    "\000\002\035\005\000\002\032\004\000\002\031\005\000" +
    "\002\033\004\000\002\033\002\000\002\011\006\000\002" +
    "\011\002\000\002\012\007\000\002\012\002\000\002\043" +
    "\007\000\002\034\003\000\002\034\003\000\002\036\004" +
    "\000\002\036\002\000\002\037\005\000\002\037\002\000" +
    "\002\044\006\000\002\044\005\000\002\042\004\000\002" +
    "\042\003\000\002\045\004\000\002\045\002\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\047\015\000\002\047\011\000\002\052\012\000\002\051" +
    "\013\000\002\054\006\000\002\002\005\000\002\003\005" +
    "\000\002\055\005\000\002\055\004\000\002\053\006\000" +
    "\002\013\013\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\023\003\000\002\023\005\000\002\025" +
    "\005\000\002\057\002\000\002\004\004\000\002\010\005" +
    "\000\002\007\005\000\002\005\004\000\002\005\003\000" +
    "\002\006\005\000\002\006\002\000\002\027\004\000\002" +
    "\027\003\000\002\030\005\000\002\030\002\000\002\016" +
    "\003\000\002\016\004\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\010\000\002\016\007\000\002\016\007\000\002\016\006" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\005\000\002" +
    "\020\003\000\002\021\004\000\002\021\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\006\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\034\010\027\020\026\021\011\022\024\023" +
    "\022\024\012\025\013\026\010\027\030\030\017\036\004" +
    "\037\007\040\023\001\002\000\026\020\026\021\011\022" +
    "\024\023\022\024\012\025\013\026\010\027\331\030\017" +
    "\040\023\001\002\000\034\002\ufff7\020\026\021\011\022" +
    "\024\023\022\024\012\025\013\026\010\027\030\030\017" +
    "\036\004\037\007\040\023\001\002\000\034\002\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\036\ufff4\037\ufff4\040\ufff4\001\002\000" +
    "\004\030\312\001\002\000\010\004\ufffa\005\ufffa\030\ufffa" +
    "\001\002\000\010\004\uffff\005\uffff\030\uffff\001\002\000" +
    "\010\004\ufffb\005\ufffb\030\ufffb\001\002\000\010\004\ufffc" +
    "\005\ufffc\030\ufffc\001\002\000\004\030\311\001\002\000" +
    "\004\002\310\001\002\000\004\002\ufff6\001\002\000\010" +
    "\004\ufff9\005\ufff9\030\ufff9\001\002\000\034\002\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000" +
    "\006\004\uffea\043\305\001\002\000\010\004\ufffd\005\ufffd" +
    "\030\ufffd\001\002\000\010\004\ufff8\005\ufff8\030\ufff8\001" +
    "\002\000\010\004\ufffe\005\ufffe\030\ufffe\001\002\000\034" +
    "\002\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\001\002\000\010\004\000\005\000\030\000\001\002\000" +
    "\044\011\uffd9\020\026\021\011\022\024\023\022\024\012" +
    "\025\013\026\010\030\043\040\023\041\035\042\056\065" +
    "\042\067\061\071\040\073\037\074\052\001\002\000\004" +
    "\030\032\001\002\000\034\002\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\001\002\000\004\010\027\001" +
    "\002\000\034\002\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\006\006\227\043\301\001\002" +
    "\000\004\030\277\001\002\000\024\011\uffd9\030\064\041" +
    "\035\042\056\065\042\067\061\071\040\073\037\074\052" +
    "\001\002\000\004\016\267\001\002\000\034\004\264\012" +
    "\113\014\uffbd\016\116\030\064\031\111\032\110\033\077" +
    "\034\101\035\114\044\073\050\112\055\107\001\002\000" +
    "\024\011\uffd7\030\uffd7\041\uffd7\042\uffd7\065\uffd7\067\uffd7" +
    "\071\uffd7\073\uffd7\074\uffd7\001\002\000\004\016\252\001" +
    "\002\000\012\006\uffc0\016\231\030\ufff9\043\uffc0\001\002" +
    "\000\044\011\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\030\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\065\uffdb\067\uffdb\071\uffdb\073\uffdb\074\uffdb\001\002\000" +
    "\004\011\251\001\002\000\024\011\uffd5\030\uffd5\041\uffd5" +
    "\042\uffd5\065\uffd5\067\uffd5\071\uffd5\073\uffd5\074\uffd5\001" +
    "\002\000\024\011\uffd6\030\uffd6\041\uffd6\042\uffd6\065\uffd6" +
    "\067\uffd6\071\uffd6\073\uffd6\074\uffd6\001\002\000\024\011" +
    "\uffcf\030\uffcf\041\uffcf\042\uffcf\065\uffcf\067\uffcf\071\uffcf" +
    "\073\uffcf\074\uffcf\001\002\000\024\011\uffd4\030\uffd4\041" +
    "\uffd4\042\uffd4\065\uffd4\067\uffd4\071\uffd4\073\uffd4\074\uffd4" +
    "\001\002\000\004\016\241\001\002\000\024\011\uffd1\030" +
    "\uffd1\041\uffd1\042\uffd1\065\uffd1\067\uffd1\071\uffd1\073\uffd1" +
    "\074\uffd1\001\002\000\024\011\uffd3\030\uffd3\041\uffd3\042" +
    "\uffd3\065\uffd3\067\uffd3\071\uffd3\073\uffd3\074\uffd3\001\002" +
    "\000\024\011\uffd8\030\uffd8\041\uffd8\042\uffd8\065\uffd8\067" +
    "\uffd8\071\uffd8\073\uffd8\074\uffd8\001\002\000\036\004\uffb2" +
    "\005\173\012\113\014\uffbd\016\116\030\064\031\111\032" +
    "\110\033\077\034\101\035\114\044\073\050\112\055\107" +
    "\001\002\000\044\011\uffd9\020\026\021\011\022\024\023" +
    "\022\024\012\025\013\026\010\030\043\040\023\041\035" +
    "\042\056\065\042\067\061\071\040\073\037\074\052\001" +
    "\002\000\024\011\uffd2\030\uffd2\041\uffd2\042\uffd2\065\uffd2" +
    "\067\uffd2\071\uffd2\073\uffd2\074\uffd2\001\002\000\004\010" +
    "\063\001\002\000\024\011\uffd0\030\uffd0\041\uffd0\042\uffd0" +
    "\065\uffd0\067\uffd0\071\uffd0\073\uffd0\074\uffd0\001\002\000" +
    "\024\011\uffd9\030\064\041\035\042\056\065\042\067\061" +
    "\071\040\073\037\074\052\001\002\000\064\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\012\uffc0\013\uffc0\015\uffc0\016\231" +
    "\017\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002\000\004\011" +
    "\066\001\002\000\004\070\067\001\002\000\004\016\070" +
    "\001\002\000\032\012\113\014\uffbd\016\116\030\064\031" +
    "\111\032\110\033\077\034\101\035\114\044\073\050\112" +
    "\055\107\001\002\000\060\004\uff97\005\uff97\006\227\007" +
    "\uff97\012\uff97\013\uff97\015\uff97\017\uff97\045\uff97\046\uff97" +
    "\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97" +
    "\001\002\000\056\004\uff98\005\uff98\007\uff98\012\uff98\013" +
    "\uff98\015\uff98\017\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\054\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\001\002\000\032" +
    "\012\113\014\uffbd\016\116\030\064\031\111\032\110\033" +
    "\077\034\101\035\114\044\073\050\112\055\107\001\002" +
    "\000\056\004\uff91\005\uff91\007\uff91\012\uff91\013\uff91\015" +
    "\uff91\017\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\054\uff91\056\uff91\057\uff91\060\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\001\002\000\004\014\211" +
    "\001\002\000\056\004\uff8f\005\uff8f\007\uff8f\012\uff8f\013" +
    "\uff8f\015\uff8f\017\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\001\002\000\056" +
    "\004\uff94\005\uff94\007\uff94\012\uff94\013\uff94\015\uff94\017" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\001\002\000\056\004\uff8e\005\uff8e" +
    "\007\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064" +
    "\uff8e\001\002\000\056\004\uffc3\005\uffc3\007\uffc3\012\uffc3" +
    "\013\uffc3\015\uffc3\017\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000" +
    "\034\012\121\017\207\045\134\047\127\050\120\054\124" +
    "\056\126\057\132\060\122\061\130\062\131\063\125\064" +
    "\123\001\002\000\056\004\uffc2\005\uffc2\007\uffc2\012\uffc2" +
    "\013\uffc2\015\uffc2\017\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\001\002\000" +
    "\056\004\uffa0\005\uffa0\007\uffa0\012\uffa0\013\uffa0\015\uffa0" +
    "\017\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\001\002\000\056\004\uff9a\005" +
    "\uff9a\007\uff9a\012\uff9a\013\uff9a\015\uff9a\017\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\205\054" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\001\002\000\054\004\uffb1\005\uffb1\007\uffb1\012" +
    "\uffb1\013\uffb1\017\uffb1\045\uffb1\046\136\047\uffb1\050\uffb1" +
    "\051\141\052\140\053\137\054\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\004" +
    "\016\202\001\002\000\056\004\uff95\005\uff95\007\uff95\012" +
    "\uff95\013\uff95\015\uff95\017\uff95\045\uff95\046\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\001\002" +
    "\000\056\004\uff93\005\uff93\007\uff93\012\uff93\013\uff93\015" +
    "\uff93\017\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\056\uff93\057\uff93\060\uff93\061" +
    "\uff93\062\uff93\063\uff93\064\uff93\001\002\000\030\012\113" +
    "\014\uffbd\016\116\030\064\031\111\032\110\033\077\034" +
    "\101\035\114\050\112\055\107\001\002\000\036\005\173" +
    "\012\113\013\uffb2\014\uffbd\016\116\030\064\031\111\032" +
    "\110\033\077\034\101\035\114\044\073\050\112\055\107" +
    "\001\002\000\056\004\uff92\005\uff92\007\uff92\012\uff92\013" +
    "\uff92\015\uff92\017\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\062\uff92\063\uff92\064\uff92\001\002\000\056" +
    "\004\uffc1\005\uffc1\007\uffc1\012\uffc1\013\uffc1\015\uffc1\017" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\001\002\000\032\012\113\014\uffbd" +
    "\016\116\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\044\073\050\112\055\107\001\002\000\034\012\121" +
    "\017\133\045\134\047\127\050\120\054\124\056\126\057" +
    "\132\060\122\061\130\062\131\063\125\064\123\001\002" +
    "\000\030\012\113\014\uffbd\016\116\030\064\031\111\032" +
    "\110\033\077\034\101\035\114\050\112\055\107\001\002" +
    "\000\034\007\157\012\113\014\uffbd\016\116\030\064\031" +
    "\111\032\110\033\077\034\101\035\114\044\073\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\030\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\050\112" +
    "\055\107\001\002\000\056\004\uff96\005\uff96\007\uff96\012" +
    "\uff96\013\uff96\015\uff96\017\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\001\002" +
    "\000\030\012\113\014\uffbd\016\116\030\064\031\111\032" +
    "\110\033\077\034\101\035\114\050\112\055\107\001\002" +
    "\000\054\004\uffad\005\uffad\007\uffad\012\uffad\013\uffad\017" +
    "\uffad\045\uffad\046\136\047\uffad\050\uffad\051\141\052\140" +
    "\053\137\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\001\002\000\030\012\113\014\uffbd" +
    "\016\116\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\050\112\055\107\001\002\000\030\012\113\014\uffbd" +
    "\016\116\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\050\112\055\107\001\002\000\030\012\113\014\uffbd" +
    "\016\116\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\050\112\055\107\001\002\000\030\012\113\014\uffbd" +
    "\016\116\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\050\112\055\107\001\002\000\056\004\uff9f\005\uff9f" +
    "\007\uff9f\012\uff9f\013\uff9f\015\uff9f\017\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\001\002\000\056\004\uff9e\005\uff9e\007\uff9e\012\uff9e" +
    "\013\uff9e\015\uff9e\017\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000" +
    "\056\004\uff9d\005\uff9d\007\uff9d\012\uff9d\013\uff9d\015\uff9d" +
    "\017\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\001\002\000\056\004\uff9c\005" +
    "\uff9c\007\uff9c\012\uff9c\013\uff9c\015\uff9c\017\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\001\002\000\054\004\uffab\005\uffab\007\uffab\012" +
    "\uffab\013\uffab\017\uffab\045\uffab\046\136\047\uffab\050\uffab" +
    "\051\141\052\140\053\137\054\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\054" +
    "\004\uffa8\005\uffa8\007\uffa8\012\uffa8\013\uffa8\017\uffa8\045" +
    "\uffa8\046\136\047\uffa8\050\uffa8\051\141\052\140\053\137" +
    "\054\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\001\002\000\054\004\uffa9\005\uffa9\007\uffa9" +
    "\012\uffa9\013\uffa9\017\uffa9\045\uffa9\046\136\047\uffa9\050" +
    "\uffa9\051\141\052\140\053\137\054\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\001\002\000" +
    "\054\004\uffaf\005\uffaf\007\uffaf\012\uffaf\013\uffaf\017\uffaf" +
    "\045\uffaf\046\136\047\uffaf\050\uffaf\051\141\052\140\053" +
    "\137\054\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\001\002\000\054\004\uffa5\005\uffa5\007" +
    "\uffa5\012\uffa5\013\uffa5\017\uffa5\045\uffa5\046\136\047\uffa5" +
    "\050\uffa5\051\141\052\140\053\137\054\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\001\002" +
    "\000\054\004\uffa7\005\uffa7\007\uffa7\012\uffa7\013\uffa7\017" +
    "\uffa7\045\uffa7\046\136\047\uffa7\050\uffa7\051\141\052\140" +
    "\053\137\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\001\002\000\054\004\uffac\005\uffac" +
    "\007\uffac\012\uffac\013\uffac\017\uffac\045\uffac\046\136\047" +
    "\uffac\050\uffac\051\141\052\140\053\137\054\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001" +
    "\002\000\054\004\uffa6\005\uffa6\007\uffa6\012\uffa6\013\uffa6" +
    "\017\uffa6\045\uffa6\046\136\047\uffa6\050\uffa6\051\141\052" +
    "\140\053\137\054\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\001\002\000\054\004\uffaa\005" +
    "\uffaa\007\uffaa\012\uffaa\013\uffaa\017\uffaa\045\uffaa\046\136" +
    "\047\uffaa\050\uffaa\051\141\052\140\053\137\054\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\001\002\000\032\012\113\014\uffbd\016\116\030\064\031" +
    "\111\032\110\033\077\034\101\035\114\044\073\050\112" +
    "\055\107\001\002\000\036\007\162\012\121\013\161\045" +
    "\134\047\127\050\120\054\124\056\126\057\132\060\122" +
    "\061\130\062\131\063\125\064\123\001\002\000\044\004" +
    "\uffa1\005\uffa1\007\uffa1\012\uffa1\013\uffa1\017\uffa1\045\uffa1" +
    "\047\uffa1\050\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002\000\034\012\113" +
    "\013\163\014\uffbd\016\116\030\064\031\111\032\110\033" +
    "\077\034\101\035\114\044\073\050\112\055\107\001\002" +
    "\000\044\004\uffa3\005\uffa3\007\uffa3\012\uffa3\013\uffa3\017" +
    "\uffa3\045\uffa3\047\uffa3\050\uffa3\054\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002\000" +
    "\034\012\121\013\165\045\134\047\127\050\120\054\124" +
    "\056\126\057\132\060\122\061\130\062\131\063\125\064" +
    "\123\001\002\000\044\004\uffa4\005\uffa4\007\uffa4\012\uffa4" +
    "\013\uffa4\017\uffa4\045\uffa4\047\uffa4\050\uffa4\054\uffa4\056" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\001\002\000\034\012\121\013\167\045\134\047\127\050" +
    "\120\054\124\056\126\057\132\060\122\061\130\062\131" +
    "\063\125\064\123\001\002\000\044\004\uffa2\005\uffa2\007" +
    "\uffa2\012\uffa2\013\uffa2\017\uffa2\045\uffa2\047\uffa2\050\uffa2" +
    "\054\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\001\002\000\054\004\uffae\005\uffae\007\uffae" +
    "\012\uffae\013\uffae\017\uffae\045\uffae\046\136\047\uffae\050" +
    "\uffae\051\141\052\140\053\137\054\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\001\002\000" +
    "\004\013\200\001\002\000\010\004\uffb4\013\uffb4\017\uffb4" +
    "\001\002\000\032\012\113\014\uffbd\016\116\030\064\031" +
    "\111\032\110\033\077\034\101\035\114\044\073\050\112" +
    "\055\107\001\002\000\042\004\uffb2\005\173\012\121\013" +
    "\uffb2\017\uffb2\045\134\047\127\050\120\054\124\056\126" +
    "\057\132\060\122\061\130\062\131\063\125\064\123\001" +
    "\002\000\010\004\uffb5\013\uffb5\017\uffb5\001\002\000\042" +
    "\004\uffb2\005\173\012\121\013\uffb2\017\uffb2\045\134\047" +
    "\127\050\120\054\124\056\126\057\132\060\122\061\130" +
    "\062\131\063\125\064\123\001\002\000\010\004\uffb3\013" +
    "\uffb3\017\uffb3\001\002\000\056\004\uffbe\005\uffbe\007\uffbe" +
    "\012\uffbe\013\uffbe\015\uffbe\017\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\056\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\001" +
    "\002\000\056\004\uff99\005\uff99\007\uff99\012\uff99\013\uff99" +
    "\015\uff99\017\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\001\002\000\032\012" +
    "\113\014\uffbd\016\116\030\064\031\111\032\110\033\077" +
    "\034\101\035\114\044\073\050\112\055\107\001\002\000" +
    "\034\012\121\017\204\045\134\047\127\050\120\054\124" +
    "\056\126\057\132\060\122\061\130\062\131\063\125\064" +
    "\123\001\002\000\056\004\uff90\005\uff90\007\uff90\012\uff90" +
    "\013\uff90\015\uff90\017\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\001\002\000" +
    "\030\012\113\014\uffbd\016\116\030\064\031\111\032\110" +
    "\033\077\034\101\035\114\050\112\055\107\001\002\000" +
    "\056\004\uff9b\005\uff9b\007\uff9b\012\uff9b\013\uff9b\015\uff9b" +
    "\017\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\001\002\000\004\004\210\001" +
    "\002\000\024\011\uffcb\030\uffcb\041\uffcb\042\uffcb\065\uffcb" +
    "\067\uffcb\071\uffcb\073\uffcb\074\uffcb\001\002\000\034\005" +
    "\215\012\113\014\uffbd\015\uffb6\016\116\030\064\031\111" +
    "\032\110\033\077\034\101\035\114\050\112\055\107\001" +
    "\002\000\056\004\uffbc\005\uffbc\007\uffbc\012\uffbc\013\uffbc" +
    "\015\uffbc\017\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\001\002\000\006\005" +
    "\215\015\uffb6\001\002\000\004\015\224\001\002\000\030" +
    "\012\113\014\uffbd\016\116\030\064\031\111\032\110\033" +
    "\077\034\101\035\114\050\112\055\107\001\002\000\014" +
    "\007\220\046\136\051\141\052\140\053\137\001\002\000" +
    "\004\015\uffb8\001\002\000\030\012\113\014\uffbd\016\116" +
    "\030\064\031\111\032\110\033\077\034\101\035\114\050" +
    "\112\055\107\001\002\000\016\005\uffba\015\uffba\046\136" +
    "\051\141\052\140\053\137\001\002\000\006\005\215\015" +
    "\uffb6\001\002\000\004\015\uffb7\001\002\000\056\004\uffbb" +
    "\005\uffbb\007\uffbb\012\uffbb\013\uffbb\015\uffbb\017\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\001\002\000\004\015\uffb9\001\002\000\044" +
    "\004\uffb0\005\uffb0\007\uffb0\012\uffb0\013\uffb0\017\uffb0\045" +
    "\134\047\uffb0\050\uffb0\054\124\056\uffb0\057\132\060\122" +
    "\061\130\062\131\063\125\064\123\001\002\000\004\030" +
    "\230\001\002\000\062\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\012\uffbf\013\uffbf\015\uffbf\017\uffbf\043\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\001\002\000\036\005\173\012\113\014\uffbd\016\116" +
    "\017\uffb2\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\044\073\050\112\055\107\001\002\000\004\017\233" +
    "\001\002\000\100\004\uffca\005\uffca\007\uffca\011\uffca\012" +
    "\uffca\013\uffca\015\uffca\017\uffca\030\uffca\041\uffca\042\uffca" +
    "\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\067\uffca\071\uffca\073\uffca\074" +
    "\uffca\001\002\000\044\011\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\065\uffdc\067\uffdc\071\uffdc\073\uffdc\074\uffdc" +
    "\001\002\000\004\011\236\001\002\000\034\002\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\036\uffde\037\uffde\040\uffde\001\002\000" +
    "\004\004\240\001\002\000\024\011\uffc8\030\uffc8\041\uffc8" +
    "\042\uffc8\065\uffc8\067\uffc8\071\uffc8\073\uffc8\074\uffc8\001" +
    "\002\000\004\030\242\001\002\000\004\007\243\001\002" +
    "\000\004\030\244\001\002\000\004\017\245\001\002\000" +
    "\004\010\246\001\002\000\024\011\uffd9\030\064\041\035" +
    "\042\056\065\042\067\061\071\040\073\037\074\052\001" +
    "\002\000\004\011\250\001\002\000\024\011\uffc4\030\uffc4" +
    "\041\uffc4\042\uffc4\065\uffc4\067\uffc4\071\uffc4\073\uffc4\074" +
    "\uffc4\001\002\000\034\002\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\001\002\000\032\012\113\014\uffbd" +
    "\016\116\030\064\031\111\032\110\033\077\034\101\035" +
    "\114\044\073\050\112\055\107\001\002\000\034\012\121" +
    "\017\254\045\134\047\127\050\120\054\124\056\126\057" +
    "\132\060\122\061\130\062\131\063\125\064\123\001\002" +
    "\000\004\010\255\001\002\000\024\011\uffd9\030\064\041" +
    "\035\042\056\065\042\067\061\071\040\073\037\074\052" +
    "\001\002\000\004\011\257\001\002\000\026\011\uffcd\030" +
    "\uffcd\041\uffcd\042\uffcd\065\uffcd\066\260\067\uffcd\071\uffcd" +
    "\073\uffcd\074\uffcd\001\002\000\004\010\261\001\002\000" +
    "\024\011\uffd9\030\064\041\035\042\056\065\042\067\061" +
    "\071\040\073\037\074\052\001\002\000\004\011\263\001" +
    "\002\000\024\011\uffce\030\uffce\041\uffce\042\uffce\065\uffce" +
    "\067\uffce\071\uffce\073\uffce\074\uffce\001\002\000\024\011" +
    "\uffc6\030\uffc6\041\uffc6\042\uffc6\065\uffc6\067\uffc6\071\uffc6" +
    "\073\uffc6\074\uffc6\001\002\000\034\004\266\012\121\045" +
    "\134\047\127\050\120\054\124\056\126\057\132\060\122" +
    "\061\130\062\131\063\125\064\123\001\002\000\024\011" +
    "\uffc7\030\uffc7\041\uffc7\042\uffc7\065\uffc7\067\uffc7\071\uffc7" +
    "\073\uffc7\074\uffc7\001\002\000\032\012\113\014\uffbd\016" +
    "\116\030\064\031\111\032\110\033\077\034\101\035\114" +
    "\044\073\050\112\055\107\001\002\000\034\012\121\017" +
    "\271\045\134\047\127\050\120\054\124\056\126\057\132" +
    "\060\122\061\130\062\131\063\125\064\123\001\002\000" +
    "\004\072\272\001\002\000\004\010\273\001\002\000\024" +
    "\011\uffd9\030\064\041\035\042\056\065\042\067\061\071" +
    "\040\073\037\074\052\001\002\000\004\011\275\001\002" +
    "\000\024\011\uffcc\030\uffcc\041\uffcc\042\uffcc\065\uffcc\067" +
    "\uffcc\071\uffcc\073\uffcc\074\uffcc\001\002\000\004\011\uffda" +
    "\001\002\000\004\004\300\001\002\000\024\011\uffc9\030" +
    "\uffc9\041\uffc9\042\uffc9\065\uffc9\067\uffc9\071\uffc9\073\uffc9" +
    "\074\uffc9\001\002\000\032\012\113\014\uffbd\016\116\030" +
    "\064\031\111\032\110\033\077\034\101\035\114\044\073" +
    "\050\112\055\107\001\002\000\034\004\303\012\121\045" +
    "\134\047\127\050\120\054\124\056\126\057\132\060\122" +
    "\061\130\062\131\063\125\064\123\001\002\000\024\011" +
    "\uffc5\030\uffc5\041\uffc5\042\uffc5\065\uffc5\067\uffc5\071\uffc5" +
    "\073\uffc5\074\uffc5\001\002\000\004\004\307\001\002\000" +
    "\036\004\uffb2\005\173\012\113\014\uffbd\016\116\030\064" +
    "\031\111\032\110\033\077\034\101\035\114\044\073\050" +
    "\112\055\107\001\002\000\004\004\uffeb\001\002\000\054" +
    "\002\uffec\011\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\065\uffec\067\uffec\071\uffec\073" +
    "\uffec\074\uffec\001\002\000\004\002\001\001\002\000\012" +
    "\004\uffed\005\uffed\017\uffed\043\uffed\001\002\000\004\007" +
    "\313\001\002\000\006\004\uffe8\030\314\001\002\000\004" +
    "\007\317\001\002\000\004\004\316\001\002\000\034\002" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\036\uffe5\037\uffe5\040\uffe5\001" +
    "\002\000\024\020\026\021\011\022\024\023\022\024\012" +
    "\025\013\026\010\030\017\040\023\001\002\000\006\004" +
    "\uffe6\005\321\001\002\000\004\030\323\001\002\000\004" +
    "\004\uffe9\001\002\000\004\007\324\001\002\000\024\020" +
    "\026\021\011\022\024\023\022\024\012\025\013\026\010" +
    "\030\017\040\023\001\002\000\006\004\uffe6\005\321\001" +
    "\002\000\004\004\uffe7\001\002\000\034\002\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\036\ufff5\037\ufff5\040\ufff5\001\002\000\004" +
    "\030\333\001\002\000\004\030\uffe4\001\002\000\004\030" +
    "\uffe3\001\002\000\006\010\027\016\335\001\002\000\034" +
    "\002\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\036\uffef\037\uffef\040\uffef" +
    "\001\002\000\026\017\uffe1\020\026\021\011\022\024\023" +
    "\022\024\012\025\013\026\010\030\017\040\023\001\002" +
    "\000\004\017\344\001\002\000\006\005\340\017\uffdf\001" +
    "\002\000\024\020\026\021\011\022\024\023\022\024\012" +
    "\025\013\026\010\030\017\040\023\001\002\000\004\017" +
    "\uffe2\001\002\000\006\005\340\017\uffdf\001\002\000\004" +
    "\017\uffe0\001\002\000\004\010\027\001\002\000\034\002" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\036\ufff0\037\ufff0\040\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\024\015\013\031\017\032\020\035\024\040" +
    "\004\041\005\043\030\044\015\056\014\001\001\000\006" +
    "\015\331\034\327\001\001\000\016\015\013\031\017\032" +
    "\020\035\024\041\326\043\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\002\052\003\061\013\047\015\013\023\033" +
    "\031\043\032\020\042\056\045\044\046\035\047\046\050" +
    "\045\051\053\052\050\053\054\054\040\055\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\052\003\061\013\047\023\033\045\275\046" +
    "\035\047\046\050\045\051\053\052\050\053\054\054\040" +
    "\055\057\001\001\000\002\001\001\000\032\004\077\016" +
    "\264\017\105\020\103\021\104\022\071\023\070\024\075" +
    "\025\114\026\102\054\073\057\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\077\016\173\017\105\020\103\021\104\022\071\023\070" +
    "\024\075\025\114\026\102\027\236\030\171\054\073\057" +
    "\074\001\001\000\042\002\052\003\061\013\047\015\013" +
    "\023\033\031\233\032\020\045\234\046\035\047\046\050" +
    "\045\051\053\052\050\053\054\054\040\055\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\052\003\061\013\047\023\033\045\064\046\035" +
    "\047\046\050\045\051\053\052\050\053\054\054\040\055" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\077\016\101\017" +
    "\105\020\103\021\104\022\071\023\070\024\075\025\114" +
    "\026\102\054\073\057\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\077\016\225\017\105\020\103" +
    "\021\104\022\071\023\070\024\075\025\114\026\102\054" +
    "\073\057\074\001\001\000\002\001\001\000\004\010\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\077\021\200\022\071\023\070\024\075\025\114\026" +
    "\102\054\073\057\074\001\001\000\036\004\077\016\173" +
    "\017\105\020\103\021\104\022\071\023\070\024\075\025" +
    "\114\026\102\027\170\030\171\054\073\057\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\077\016" +
    "\116\017\105\020\103\021\104\022\071\023\070\024\075" +
    "\025\114\026\102\054\073\057\074\001\001\000\002\001" +
    "\001\000\030\004\077\017\167\020\103\021\104\022\071" +
    "\023\070\024\075\025\114\026\102\054\073\057\074\001" +
    "\001\000\032\004\077\016\157\017\105\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\155\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\154\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\153\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\152\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\151\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\150\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\147\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\146\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\030\004\077\017\145\020\103\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\002\001\001\000\030\004\077\017\134" +
    "\020\103\021\104\022\071\023\070\024\075\025\114\026" +
    "\102\054\073\057\074\001\001\000\002\001\001\000\026" +
    "\004\077\020\144\021\104\022\071\023\070\024\075\025" +
    "\114\026\102\054\073\057\074\001\001\000\026\004\077" +
    "\020\143\021\104\022\071\023\070\024\075\025\114\026" +
    "\102\054\073\057\074\001\001\000\026\004\077\020\142" +
    "\021\104\022\071\023\070\024\075\025\114\026\102\054" +
    "\073\057\074\001\001\000\026\004\077\020\141\021\104" +
    "\022\071\023\070\024\075\025\114\026\102\054\073\057" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\077\016\165\017\105\020\103" +
    "\021\104\022\071\023\070\024\075\025\114\026\102\054" +
    "\073\057\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\077\016\163\017\105\020\103\021\104\022" +
    "\071\023\070\024\075\025\114\026\102\054\073\057\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\077\016" +
    "\175\017\105\020\103\021\104\022\071\023\070\024\075" +
    "\025\114\026\102\054\073\057\074\001\001\000\004\030" +
    "\174\001\001\000\002\001\001\000\004\030\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\077\016\202\017\105\020\103\021\104\022\071" +
    "\023\070\024\075\025\114\026\102\054\073\057\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\077" +
    "\020\205\021\104\022\071\023\070\024\075\025\114\026" +
    "\102\054\073\057\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\077\005\213\006" +
    "\216\007\212\017\215\020\103\021\104\022\071\023\070" +
    "\024\075\025\114\026\102\054\073\057\074\001\001\000" +
    "\002\001\001\000\004\006\224\001\001\000\002\001\001" +
    "\000\032\004\077\007\221\017\215\020\103\021\104\022" +
    "\071\023\070\024\075\025\114\026\102\054\073\057\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\077\017\220\020\103\021\104\022\071\023\070\024\075" +
    "\025\114\026\102\054\073\057\074\001\001\000\002\001" +
    "\001\000\004\006\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\077\016\173\017\105" +
    "\020\103\021\104\022\071\023\070\024\075\025\114\026" +
    "\102\027\231\030\171\054\073\057\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\052\003\061" +
    "\013\047\023\033\045\246\046\035\047\046\050\045\051" +
    "\053\052\050\053\054\054\040\055\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\077\016\252\017\105\020\103\021\104\022\071\023\070" +
    "\024\075\025\114\026\102\054\073\057\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\052\003\061" +
    "\013\047\023\033\045\255\046\035\047\046\050\045\051" +
    "\053\052\050\053\054\054\040\055\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\052\003\061\013\047\023\033\045\261\046\035\047\046" +
    "\050\045\051\053\052\050\053\054\054\040\055\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\077\016" +
    "\267\017\105\020\103\021\104\022\071\023\070\024\075" +
    "\025\114\026\102\054\073\057\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\052" +
    "\003\061\013\047\023\033\045\273\046\035\047\046\050" +
    "\045\051\053\052\050\053\054\054\040\055\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\077\016\301" +
    "\017\105\020\103\021\104\022\071\023\070\024\075\025" +
    "\114\026\102\054\073\057\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\077\016" +
    "\173\017\105\020\103\021\104\022\071\023\070\024\075" +
    "\025\114\026\102\027\305\030\171\054\073\057\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\317\001\001\000\004\012\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\324\001\001\000\004\012\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\333\001\001\000\002\001" +
    "\001\000\010\015\013\032\336\036\335\001\001\000\002" +
    "\001\001\000\004\037\340\001\001\000\006\015\013\032" +
    "\341\001\001\000\002\001\001\000\004\037\342\001\001" +
    "\000\002\001\001\000\004\044\344\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuilder a = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      a.append( "("+info.toString()+")" );
     
    a.append(" : "+message);
   
    System.out.println(a);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error - Please look into this!!! - or dont...");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // final ::= dictionary 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // final ::= sequence 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // final ::= LENGTH LEFTPAREN expression RIGHTPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // final ::= function_call 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // final ::= CHARLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // final ::= BOOLLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // final ::= FLOATLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // final ::= INTLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // final ::= LEFTPAREN expression RIGHTPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // final ::= accessor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exponent ::= final 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exponent",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exponent ::= MINUS exponent 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exponent",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= exponent 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= exponent POWER factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // term ::= term AND factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // term ::= term POWER factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // term ::= term DIVIDE factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term ::= term MULTIPLY factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression LEFTBRACKET COLON expression RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression LEFTBRACKET expression COLON RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression LEFTBRACKET expression COLON expression RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression CONCAT term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression NOTEQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression EQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression GREATERTHANEQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression GREATERTHAN term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression LESSTHANEQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression LESSTHAN term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression IN term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression OR term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression MINUS term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression PLUS term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_clist2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist2",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_clist2 ::= COMMA expression expression_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist2",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_clist ::= expression_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_clist ::= expression expression_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dict_list2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list2",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dict_list2 ::= COMMA keyvalpair dict_list2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list2",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dict_list ::= dict_list2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dict_list ::= keyvalpair dict_list2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // keyvalpair ::= term COLON term 
            {
              Object RESULT =null;
		 System.out.println("keyval"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("keyvalpair",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dict ::= LEFTTBRACKET dict_list RIGHTTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dictionary ::= NT$0 dict 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dictionary",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("parsed dictionary"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list ::= LEFTBRACKET expression_clist RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // accessor ::= accessor DOT ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("accessor",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // accessor ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("accessor",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sequence ::= list 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sequence ::= tuple 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sequence ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // foreach ::= FOREACH LEFTPAREN ID COLON ID RIGHTPAREN LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("foreach",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment ::= accessor ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("assignment",41, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // return ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("return",43, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // return ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("return",43, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // print_statement ::= PRINT expression_clist SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("print_statement",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // read_statement ::= READ ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("read_statement",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_call ::= ID LEFTPAREN expression_clist RIGHTPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_call",42, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // repeatuntil ::= REPEAT LEFTBRACE statement_list RIGHTBRACE UNTIL LEFTPAREN expression RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("repeatuntil",39, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while ::= WHILE LEFTPAREN expression RIGHTPAREN DO LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("while",40, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ifelse ::= IF LEFTPAREN expression RIGHTPAREN LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ifelse",37, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ifelse ::= IF LEFTPAREN expression RIGHTPAREN LEFTBRACE statement_list RIGHTBRACE ELSE LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ifelse",37, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-10)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= foreach 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= print_statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= read_statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= return 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= repeatuntil 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= while 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= if 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= ifelse 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= function_call 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement_list",35, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement_list",35, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // local_decl_list ::= var_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("local_decl_list",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // local_decl_list ::= local_decl_list var_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("local_decl_list",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("block",34, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block ::= LEFTBRACE local_decl_list statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("block",34, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_clist2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist2",29, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_clist2 ::= COMMA var_type parameter_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist2",29, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_clist ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist",28, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_clist ::= var_type parameter_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist",28, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_type ::= type 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_type",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_type ::= VOID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_type",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datatype_decl ::= TDEF ID COLON tdef_clist SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("datatype_decl",33, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tdef_clist2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef_clist2",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tdef_clist2 ::= COMMA ID COLON type tdef_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef_clist2",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tdef_clist ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef_clist",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tdef_clist ::= ID COLON type tdef_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tdef_clist",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_init ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_init",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_init ::= ASSIGN expression_clist 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_init",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_decl ::= var_type var_init SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_decl",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_type ::= type ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_type",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_decl ::= VOID ID block 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_decl",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_decl ::= FDEF function_type ID block 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_decl",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_decl ::= FDEF function_type ID LEFTPAREN parameter_clist RIGHTPAREN block 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_decl",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global_decl ::= function_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global_decl ::= var_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global_decl ::= datatype_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= block 
            {
              Object RESULT =null;
		 System.out.println("Parsing Complete"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",44, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= global_decl_list 
            {
              Object RESULT =null;
		 System.out.println("Parsing Complete"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",44, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= DICT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= TUPLE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= LIST 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

