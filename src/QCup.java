
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 13 19:55:16 GMT 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 13 19:55:16 GMT 2014
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\051\003\000\002\051\003\000\002" +
    "\034\004\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\031\011\000\002\031\006" +
    "\000\002\026\004\000\002\025\005\000\002\027\004\000" +
    "\002\027\002\000\002\037\007\000\002\030\003\000\002" +
    "\030\003\000\002\032\004\000\002\032\002\000\002\033" +
    "\005\000\002\033\002\000\002\040\006\000\002\040\005" +
    "\000\002\036\004\000\002\036\003\000\002\041\004\000" +
    "\002\041\002\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\015" +
    "\000\002\045\012\000\002\044\013\000\002\047\006\000" +
    "\002\002\005\000\002\003\005\000\002\050\005\000\002" +
    "\050\004\000\002\046\006\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\017\003\000\002\017\005" +
    "\000\002\021\005\000\002\052\002\000\002\004\004\000" +
    "\002\010\005\000\002\007\005\000\002\005\004\000\002" +
    "\005\003\000\002\006\005\000\002\006\002\000\002\023" +
    "\004\000\002\023\003\000\002\024\005\000\002\024\002" +
    "\000\002\012\003\000\002\012\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\010\000\002\012\007\000\002\012\007\000" +
    "\002\012\006\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\006\000\002\016\003\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\032\010\027\020\026\021\011\022\024\023" +
    "\022\024\012\025\014\026\010\030\017\036\004\037\007" +
    "\040\023\001\002\000\026\020\026\021\011\022\024\023" +
    "\022\024\012\025\014\026\010\027\307\030\017\040\023" +
    "\001\002\000\032\002\ufff7\020\026\021\011\022\024\023" +
    "\022\024\012\025\014\026\010\030\017\036\004\037\007" +
    "\040\023\001\002\000\032\002\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\001\002\000\004\030\274\001\002\000" +
    "\004\030\ufffa\001\002\000\004\030\uffff\001\002\000\004" +
    "\030\ufffb\001\002\000\004\030\273\001\002\000\004\030" +
    "\ufffc\001\002\000\004\002\272\001\002\000\004\002\ufff6" +
    "\001\002\000\004\030\ufff9\001\002\000\032\002\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\030\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000\006\004" +
    "\uffeb\043\267\001\002\000\004\030\ufffd\001\002\000\004" +
    "\030\ufff8\001\002\000\004\030\ufffe\001\002\000\032\002" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\030\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002\000" +
    "\004\030\000\001\002\000\042\011\uffde\020\026\021\011" +
    "\022\024\023\022\024\012\025\014\026\010\030\040\040" +
    "\023\041\032\042\050\065\037\067\053\071\035\073\034" +
    "\001\002\000\032\002\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\001\002\000\006\006\221\043\263\001\002\000" +
    "\004\030\261\001\002\000\022\011\uffde\030\056\041\032" +
    "\042\050\065\037\067\053\071\035\073\034\001\002\000" +
    "\004\016\251\001\002\000\034\004\246\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\044\065\050\104\055\101\001\002\000\022\011\uffdc" +
    "\030\uffdc\041\uffdc\042\uffdc\065\uffdc\067\uffdc\071\uffdc\073" +
    "\uffdc\001\002\000\004\016\234\001\002\000\012\006\uffc9" +
    "\016\223\030\ufff9\043\uffc9\001\002\000\042\011\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\030\uffe0\040\uffe0\041\uffe0\042\uffe0\065\uffe0\067\uffe0\071" +
    "\uffe0\073\uffe0\001\002\000\004\011\233\001\002\000\022" +
    "\011\uffdb\030\uffdb\041\uffdb\042\uffdb\065\uffdb\067\uffdb\071" +
    "\uffdb\073\uffdb\001\002\000\022\011\uffda\030\uffda\041\uffda" +
    "\042\uffda\065\uffda\067\uffda\071\uffda\073\uffda\001\002\000" +
    "\022\011\uffd7\030\uffd7\041\uffd7\042\uffd7\065\uffd7\067\uffd7" +
    "\071\uffd7\073\uffd7\001\002\000\022\011\uffd9\030\uffd9\041" +
    "\uffd9\042\uffd9\065\uffd9\067\uffd9\071\uffd9\073\uffd9\001\002" +
    "\000\022\011\uffdd\030\uffdd\041\uffdd\042\uffdd\065\uffdd\067" +
    "\uffdd\071\uffdd\073\uffdd\001\002\000\036\004\uffbb\005\165" +
    "\012\105\014\uffc6\016\110\030\056\031\103\032\102\033" +
    "\071\034\073\035\106\044\065\050\104\055\101\001\002" +
    "\000\042\011\uffde\020\026\021\011\022\024\023\022\024" +
    "\012\025\014\026\010\030\040\040\023\041\032\042\050" +
    "\065\037\067\053\071\035\073\034\001\002\000\022\011" +
    "\uffd8\030\uffd8\041\uffd8\042\uffd8\065\uffd8\067\uffd8\071\uffd8" +
    "\073\uffd8\001\002\000\004\010\055\001\002\000\022\011" +
    "\uffd6\030\uffd6\041\uffd6\042\uffd6\065\uffd6\067\uffd6\071\uffd6" +
    "\073\uffd6\001\002\000\022\011\uffde\030\056\041\032\042" +
    "\050\065\037\067\053\071\035\073\034\001\002\000\064" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\012\uffc9\013\uffc9\015" +
    "\uffc9\016\223\017\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002" +
    "\000\004\011\060\001\002\000\004\070\061\001\002\000" +
    "\004\016\062\001\002\000\032\012\105\014\uffc6\016\110" +
    "\030\056\031\103\032\102\033\071\034\073\035\106\044" +
    "\065\050\104\055\101\001\002\000\060\004\uffa0\005\uffa0" +
    "\006\221\007\uffa0\012\uffa0\013\uffa0\015\uffa0\017\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\001\002\000\056\004\uffa1\005\uffa1\007\uffa1" +
    "\012\uffa1\013\uffa1\015\uffa1\017\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001" +
    "\002\000\032\012\105\014\uffc6\016\110\030\056\031\103" +
    "\032\102\033\071\034\073\035\106\044\065\050\104\055" +
    "\101\001\002\000\056\004\uff9a\005\uff9a\007\uff9a\012\uff9a" +
    "\013\uff9a\015\uff9a\017\uff9a\045\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002\000" +
    "\004\014\203\001\002\000\056\004\uff98\005\uff98\007\uff98" +
    "\012\uff98\013\uff98\015\uff98\017\uff98\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\001" +
    "\002\000\056\004\uff9d\005\uff9d\007\uff9d\012\uff9d\013\uff9d" +
    "\015\uff9d\017\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\001\002\000\056\004" +
    "\uff97\005\uff97\007\uff97\012\uff97\013\uff97\015\uff97\017\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\056\uff97\057\uff97\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\064\uff97\001\002\000\056\004\uffcc\005\uffcc\007" +
    "\uffcc\012\uffcc\013\uffcc\015\uffcc\017\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\001\002\000\034\012\113\017\201\045\126\047\120\050" +
    "\112\054\116\056\121\057\123\060\114\061\122\062\124" +
    "\063\117\064\115\001\002\000\056\004\uffcb\005\uffcb\007" +
    "\uffcb\012\uffcb\013\uffcb\015\uffcb\017\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\001\002\000\056\004\uffa9\005\uffa9\007\uffa9\012\uffa9\013" +
    "\uffa9\015\uffa9\017\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\001\002\000\056" +
    "\004\uffa3\005\uffa3\007\uffa3\012\uffa3\013\uffa3\015\uffa3\017" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\177\054\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\001\002\000\054\004\uffba\005\uffba" +
    "\007\uffba\012\uffba\013\uffba\017\uffba\045\uffba\046\130\047" +
    "\uffba\050\uffba\051\133\052\132\053\131\054\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001" +
    "\002\000\004\016\174\001\002\000\056\004\uff9e\005\uff9e" +
    "\007\uff9e\012\uff9e\013\uff9e\015\uff9e\017\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\001\002\000\056\004\uff9c\005\uff9c\007\uff9c\012\uff9c" +
    "\013\uff9c\015\uff9c\017\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\001\002\000" +
    "\030\012\105\014\uffc6\016\110\030\056\031\103\032\102" +
    "\033\071\034\073\035\106\050\104\055\101\001\002\000" +
    "\036\005\165\012\105\013\uffbb\014\uffc6\016\110\030\056" +
    "\031\103\032\102\033\071\034\073\035\106\044\065\050" +
    "\104\055\101\001\002\000\056\004\uff9b\005\uff9b\007\uff9b" +
    "\012\uff9b\013\uff9b\015\uff9b\017\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\001" +
    "\002\000\056\004\uffca\005\uffca\007\uffca\012\uffca\013\uffca" +
    "\015\uffca\017\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\001\002\000\032\012" +
    "\105\014\uffc6\016\110\030\056\031\103\032\102\033\071" +
    "\034\073\035\106\044\065\050\104\055\101\001\002\000" +
    "\034\012\113\017\125\045\126\047\120\050\112\054\116" +
    "\056\121\057\123\060\114\061\122\062\124\063\117\064" +
    "\115\001\002\000\030\012\105\014\uffc6\016\110\030\056" +
    "\031\103\032\102\033\071\034\073\035\106\050\104\055" +
    "\101\001\002\000\034\007\151\012\105\014\uffc6\016\110" +
    "\030\056\031\103\032\102\033\071\034\073\035\106\044" +
    "\065\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\030\012\105\014\uffc6" +
    "\016\110\030\056\031\103\032\102\033\071\034\073\035" +
    "\106\050\104\055\101\001\002\000\056\004\uff9f\005\uff9f" +
    "\007\uff9f\012\uff9f\013\uff9f\015\uff9f\017\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\001\002\000\030\012\105\014\uffc6\016\110\030\056" +
    "\031\103\032\102\033\071\034\073\035\106\050\104\055" +
    "\101\001\002\000\054\004\uffb6\005\uffb6\007\uffb6\012\uffb6" +
    "\013\uffb6\017\uffb6\045\uffb6\046\130\047\uffb6\050\uffb6\051" +
    "\133\052\132\053\131\054\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000\030\012" +
    "\105\014\uffc6\016\110\030\056\031\103\032\102\033\071" +
    "\034\073\035\106\050\104\055\101\001\002\000\030\012" +
    "\105\014\uffc6\016\110\030\056\031\103\032\102\033\071" +
    "\034\073\035\106\050\104\055\101\001\002\000\030\012" +
    "\105\014\uffc6\016\110\030\056\031\103\032\102\033\071" +
    "\034\073\035\106\050\104\055\101\001\002\000\030\012" +
    "\105\014\uffc6\016\110\030\056\031\103\032\102\033\071" +
    "\034\073\035\106\050\104\055\101\001\002\000\056\004" +
    "\uffa8\005\uffa8\007\uffa8\012\uffa8\013\uffa8\015\uffa8\017\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\001\002\000\056\004\uffa7\005\uffa7\007" +
    "\uffa7\012\uffa7\013\uffa7\015\uffa7\017\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\001\002\000\056\004\uffa6\005\uffa6\007\uffa6\012\uffa6\013" +
    "\uffa6\015\uffa6\017\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000\056" +
    "\004\uffa5\005\uffa5\007\uffa5\012\uffa5\013\uffa5\015\uffa5\017" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\001\002\000\054\004\uffb1\005\uffb1" +
    "\007\uffb1\012\uffb1\013\uffb1\017\uffb1\045\uffb1\046\130\047" +
    "\uffb1\050\uffb1\051\133\052\132\053\131\054\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001" +
    "\002\000\054\004\uffb4\005\uffb4\007\uffb4\012\uffb4\013\uffb4" +
    "\017\uffb4\045\uffb4\046\130\047\uffb4\050\uffb4\051\133\052" +
    "\132\053\131\054\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\001\002\000\054\004\uffb2\005" +
    "\uffb2\007\uffb2\012\uffb2\013\uffb2\017\uffb2\045\uffb2\046\130" +
    "\047\uffb2\050\uffb2\051\133\052\132\053\131\054\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\001\002\000\054\004\uffae\005\uffae\007\uffae\012\uffae\013" +
    "\uffae\017\uffae\045\uffae\046\130\047\uffae\050\uffae\051\133" +
    "\052\132\053\131\054\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\001\002\000\054\004\uffb8" +
    "\005\uffb8\007\uffb8\012\uffb8\013\uffb8\017\uffb8\045\uffb8\046" +
    "\130\047\uffb8\050\uffb8\051\133\052\132\053\131\054\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\001\002\000\054\004\uffb0\005\uffb0\007\uffb0\012\uffb0" +
    "\013\uffb0\017\uffb0\045\uffb0\046\130\047\uffb0\050\uffb0\051" +
    "\133\052\132\053\131\054\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001\002\000\054\004" +
    "\uffb5\005\uffb5\007\uffb5\012\uffb5\013\uffb5\017\uffb5\045\uffb5" +
    "\046\130\047\uffb5\050\uffb5\051\133\052\132\053\131\054" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\001\002\000\054\004\uffaf\005\uffaf\007\uffaf\012" +
    "\uffaf\013\uffaf\017\uffaf\045\uffaf\046\130\047\uffaf\050\uffaf" +
    "\051\133\052\132\053\131\054\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\001\002\000\054" +
    "\004\uffb3\005\uffb3\007\uffb3\012\uffb3\013\uffb3\017\uffb3\045" +
    "\uffb3\046\130\047\uffb3\050\uffb3\051\133\052\132\053\131" +
    "\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\001\002\000\032\012\105\014\uffc6\016\110" +
    "\030\056\031\103\032\102\033\071\034\073\035\106\044" +
    "\065\050\104\055\101\001\002\000\036\007\153\012\113" +
    "\013\154\045\126\047\120\050\112\054\116\056\121\057" +
    "\123\060\114\061\122\062\124\063\117\064\115\001\002" +
    "\000\034\012\105\013\155\014\uffc6\016\110\030\056\031" +
    "\103\032\102\033\071\034\073\035\106\044\065\050\104" +
    "\055\101\001\002\000\044\004\uffaa\005\uffaa\007\uffaa\012" +
    "\uffaa\013\uffaa\017\uffaa\045\uffaa\047\uffaa\050\uffaa\054\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\001\002\000\044\004\uffac\005\uffac\007\uffac\012\uffac" +
    "\013\uffac\017\uffac\045\uffac\047\uffac\050\uffac\054\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\001\002\000\034\012\113\013\157\045\126\047\120\050" +
    "\112\054\116\056\121\057\123\060\114\061\122\062\124" +
    "\063\117\064\115\001\002\000\044\004\uffad\005\uffad\007" +
    "\uffad\012\uffad\013\uffad\017\uffad\045\uffad\047\uffad\050\uffad" +
    "\054\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063" +
    "\uffad\064\uffad\001\002\000\034\012\113\013\161\045\126" +
    "\047\120\050\112\054\116\056\121\057\123\060\114\061" +
    "\122\062\124\063\117\064\115\001\002\000\044\004\uffab" +
    "\005\uffab\007\uffab\012\uffab\013\uffab\017\uffab\045\uffab\047" +
    "\uffab\050\uffab\054\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\001\002\000\054\004\uffb7\005" +
    "\uffb7\007\uffb7\012\uffb7\013\uffb7\017\uffb7\045\uffb7\046\130" +
    "\047\uffb7\050\uffb7\051\133\052\132\053\131\054\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7" +
    "\001\002\000\004\013\172\001\002\000\010\004\uffbd\013" +
    "\uffbd\017\uffbd\001\002\000\032\012\105\014\uffc6\016\110" +
    "\030\056\031\103\032\102\033\071\034\073\035\106\044" +
    "\065\050\104\055\101\001\002\000\042\004\uffbb\005\165" +
    "\012\113\013\uffbb\017\uffbb\045\126\047\120\050\112\054" +
    "\116\056\121\057\123\060\114\061\122\062\124\063\117" +
    "\064\115\001\002\000\010\004\uffbe\013\uffbe\017\uffbe\001" +
    "\002\000\042\004\uffbb\005\165\012\113\013\uffbb\017\uffbb" +
    "\045\126\047\120\050\112\054\116\056\121\057\123\060" +
    "\114\061\122\062\124\063\117\064\115\001\002\000\010" +
    "\004\uffbc\013\uffbc\017\uffbc\001\002\000\056\004\uffc7\005" +
    "\uffc7\007\uffc7\012\uffc7\013\uffc7\015\uffc7\017\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\001\002\000\056\004\uffa2\005\uffa2\007\uffa2\012" +
    "\uffa2\013\uffa2\015\uffa2\017\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\001\002" +
    "\000\032\012\105\014\uffc6\016\110\030\056\031\103\032" +
    "\102\033\071\034\073\035\106\044\065\050\104\055\101" +
    "\001\002\000\034\012\113\017\176\045\126\047\120\050" +
    "\112\054\116\056\121\057\123\060\114\061\122\062\124" +
    "\063\117\064\115\001\002\000\056\004\uff99\005\uff99\007" +
    "\uff99\012\uff99\013\uff99\015\uff99\017\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\001\002\000\030\012\105\014\uffc6\016\110\030\056\031" +
    "\103\032\102\033\071\034\073\035\106\050\104\055\101" +
    "\001\002\000\056\004\uffa4\005\uffa4\007\uffa4\012\uffa4\013" +
    "\uffa4\015\uffa4\017\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002\000\004" +
    "\004\202\001\002\000\022\011\uffd3\030\uffd3\041\uffd3\042" +
    "\uffd3\065\uffd3\067\uffd3\071\uffd3\073\uffd3\001\002\000\034" +
    "\005\207\012\105\014\uffc6\015\uffbf\016\110\030\056\031" +
    "\103\032\102\033\071\034\073\035\106\050\104\055\101" +
    "\001\002\000\056\004\uffc5\005\uffc5\007\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\017\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\006" +
    "\005\207\015\uffbf\001\002\000\004\015\216\001\002\000" +
    "\030\012\105\014\uffc6\016\110\030\056\031\103\032\102" +
    "\033\071\034\073\035\106\050\104\055\101\001\002\000" +
    "\014\007\212\046\130\051\133\052\132\053\131\001\002" +
    "\000\004\015\uffc1\001\002\000\030\012\105\014\uffc6\016" +
    "\110\030\056\031\103\032\102\033\071\034\073\035\106" +
    "\050\104\055\101\001\002\000\016\005\uffc3\015\uffc3\046" +
    "\130\051\133\052\132\053\131\001\002\000\006\005\207" +
    "\015\uffbf\001\002\000\004\015\uffc0\001\002\000\056\004" +
    "\uffc4\005\uffc4\007\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\001\002\000\004\015\uffc2\001\002\000" +
    "\044\004\uffb9\005\uffb9\007\uffb9\012\uffb9\013\uffb9\017\uffb9" +
    "\045\126\047\uffb9\050\uffb9\054\116\056\uffb9\057\123\060" +
    "\114\061\122\062\124\063\117\064\115\001\002\000\004" +
    "\030\222\001\002\000\062\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\017\uffc8\043\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\036\005\165\012\105\014\uffc6\016" +
    "\110\017\uffbb\030\056\031\103\032\102\033\071\034\073" +
    "\035\106\044\065\050\104\055\101\001\002\000\004\017" +
    "\225\001\002\000\076\004\uffd2\005\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\015\uffd2\017\uffd2\030\uffd2\041\uffd2\042" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\071\uffd2\073\uffd2" +
    "\001\002\000\042\011\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\065\uffe1\067\uffe1\071\uffe1\073\uffe1\001\002\000" +
    "\004\011\230\001\002\000\032\002\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\001\002\000\004\004\232\001\002" +
    "\000\022\011\uffd0\030\uffd0\041\uffd0\042\uffd0\065\uffd0\067" +
    "\uffd0\071\uffd0\073\uffd0\001\002\000\032\002\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\032\012\105" +
    "\014\uffc6\016\110\030\056\031\103\032\102\033\071\034" +
    "\073\035\106\044\065\050\104\055\101\001\002\000\034" +
    "\012\113\017\236\045\126\047\120\050\112\054\116\056" +
    "\121\057\123\060\114\061\122\062\124\063\117\064\115" +
    "\001\002\000\004\010\237\001\002\000\022\011\uffde\030" +
    "\056\041\032\042\050\065\037\067\053\071\035\073\034" +
    "\001\002\000\004\011\241\001\002\000\004\066\242\001" +
    "\002\000\004\010\243\001\002\000\022\011\uffde\030\056" +
    "\041\032\042\050\065\037\067\053\071\035\073\034\001" +
    "\002\000\004\011\245\001\002\000\022\011\uffd5\030\uffd5" +
    "\041\uffd5\042\uffd5\065\uffd5\067\uffd5\071\uffd5\073\uffd5\001" +
    "\002\000\022\011\uffce\030\uffce\041\uffce\042\uffce\065\uffce" +
    "\067\uffce\071\uffce\073\uffce\001\002\000\034\004\250\012" +
    "\113\045\126\047\120\050\112\054\116\056\121\057\123" +
    "\060\114\061\122\062\124\063\117\064\115\001\002\000" +
    "\022\011\uffcf\030\uffcf\041\uffcf\042\uffcf\065\uffcf\067\uffcf" +
    "\071\uffcf\073\uffcf\001\002\000\032\012\105\014\uffc6\016" +
    "\110\030\056\031\103\032\102\033\071\034\073\035\106" +
    "\044\065\050\104\055\101\001\002\000\034\012\113\017" +
    "\253\045\126\047\120\050\112\054\116\056\121\057\123" +
    "\060\114\061\122\062\124\063\117\064\115\001\002\000" +
    "\004\072\254\001\002\000\004\010\255\001\002\000\022" +
    "\011\uffde\030\056\041\032\042\050\065\037\067\053\071" +
    "\035\073\034\001\002\000\004\011\257\001\002\000\022" +
    "\011\uffd4\030\uffd4\041\uffd4\042\uffd4\065\uffd4\067\uffd4\071" +
    "\uffd4\073\uffd4\001\002\000\004\011\uffdf\001\002\000\004" +
    "\004\262\001\002\000\022\011\uffd1\030\uffd1\041\uffd1\042" +
    "\uffd1\065\uffd1\067\uffd1\071\uffd1\073\uffd1\001\002\000\032" +
    "\012\105\014\uffc6\016\110\030\056\031\103\032\102\033" +
    "\071\034\073\035\106\044\065\050\104\055\101\001\002" +
    "\000\034\004\265\012\113\045\126\047\120\050\112\054" +
    "\116\056\121\057\123\060\114\061\122\062\124\063\117" +
    "\064\115\001\002\000\022\011\uffcd\030\uffcd\041\uffcd\042" +
    "\uffcd\065\uffcd\067\uffcd\071\uffcd\073\uffcd\001\002\000\004" +
    "\004\271\001\002\000\036\004\uffbb\005\165\012\105\014" +
    "\uffc6\016\110\030\056\031\103\032\102\033\071\034\073" +
    "\035\106\044\065\050\104\055\101\001\002\000\004\004" +
    "\uffec\001\002\000\050\002\uffed\011\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\065\uffed\067\uffed" +
    "\071\uffed\073\uffed\001\002\000\004\002\001\001\002\000" +
    "\012\004\uffee\005\uffee\017\uffee\043\uffee\001\002\000\004" +
    "\007\275\001\002\000\026\004\uffe6\020\026\021\011\022" +
    "\024\023\022\024\012\025\014\026\010\030\017\040\023" +
    "\001\002\000\004\004\304\001\002\000\010\004\uffe4\005" +
    "\300\017\uffe4\001\002\000\024\020\026\021\011\022\024" +
    "\023\022\024\012\025\014\026\010\030\017\040\023\001" +
    "\002\000\006\004\uffe7\017\uffe7\001\002\000\010\004\uffe4" +
    "\005\300\017\uffe4\001\002\000\006\004\uffe5\017\uffe5\001" +
    "\002\000\032\002\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\030\uffea\036\uffea\037\uffea\040" +
    "\uffea\001\002\000\032\002\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\001\002\000\004\030\311\001\002\000\004" +
    "\030\uffe9\001\002\000\004\030\uffe8\001\002\000\006\010" +
    "\027\016\313\001\002\000\032\002\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030\uffef\036" +
    "\uffef\037\uffef\040\uffef\001\002\000\026\017\uffe6\020\026" +
    "\021\011\022\024\023\022\024\012\025\014\026\010\030" +
    "\017\040\023\001\002\000\004\017\315\001\002\000\004" +
    "\010\027\001\002\000\032\002\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\024\011\012\025\017\026\020\031\024\034" +
    "\004\035\005\037\027\040\015\051\014\001\001\000\006" +
    "\011\307\030\305\001\001\000\016\011\012\025\017\026" +
    "\020\031\024\035\304\037\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\044\003\053\011\012\017\030\025\040" +
    "\026\020\036\050\041\041\042\032\043\042\044\045\045" +
    "\043\046\046\047\035\050\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\044\003" +
    "\053\017\030\041\257\042\032\043\042\044\045\045\043" +
    "\046\046\047\035\050\051\001\001\000\002\001\001\000" +
    "\032\004\071\012\246\013\077\014\075\015\076\016\063" +
    "\017\062\020\067\021\106\022\074\047\065\052\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\071\012\165\013\077\014\075\015" +
    "\076\016\063\017\062\020\067\021\106\022\074\023\230" +
    "\024\163\047\065\052\066\001\001\000\036\002\044\003" +
    "\053\011\012\017\030\025\225\026\020\041\226\042\032" +
    "\043\042\044\045\045\043\046\046\047\035\050\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\044\003\053\017\030\041\056\042\032\043" +
    "\042\044\045\045\043\046\046\047\035\050\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\071\012\073\013\077\014\075" +
    "\015\076\016\063\017\062\020\067\021\106\022\074\047" +
    "\065\052\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\071\012\217\013\077\014\075\015\076\016" +
    "\063\017\062\020\067\021\106\022\074\047\065\052\066" +
    "\001\001\000\002\001\001\000\004\010\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\071\015" +
    "\172\016\063\017\062\020\067\021\106\022\074\047\065" +
    "\052\066\001\001\000\036\004\071\012\165\013\077\014" +
    "\075\015\076\016\063\017\062\020\067\021\106\022\074" +
    "\023\162\024\163\047\065\052\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\071\012\110\013\077" +
    "\014\075\015\076\016\063\017\062\020\067\021\106\022" +
    "\074\047\065\052\066\001\001\000\002\001\001\000\030" +
    "\004\071\013\161\014\075\015\076\016\063\017\062\020" +
    "\067\021\106\022\074\047\065\052\066\001\001\000\032" +
    "\004\071\012\151\013\077\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\147\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\146\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\145\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\144\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\143\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\142\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\141\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\140\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\030\004\071\013\137\014\075\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\002\001\001\000\030\004\071\013\126\014\075\015" +
    "\076\016\063\017\062\020\067\021\106\022\074\047\065" +
    "\052\066\001\001\000\002\001\001\000\026\004\071\014" +
    "\136\015\076\016\063\017\062\020\067\021\106\022\074" +
    "\047\065\052\066\001\001\000\026\004\071\014\135\015" +
    "\076\016\063\017\062\020\067\021\106\022\074\047\065" +
    "\052\066\001\001\000\026\004\071\014\134\015\076\016" +
    "\063\017\062\020\067\021\106\022\074\047\065\052\066" +
    "\001\001\000\026\004\071\014\133\015\076\016\063\017" +
    "\062\020\067\021\106\022\074\047\065\052\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\071\012\157\013\077\014\075\015\076\016" +
    "\063\017\062\020\067\021\106\022\074\047\065\052\066" +
    "\001\001\000\002\001\001\000\032\004\071\012\155\013" +
    "\077\014\075\015\076\016\063\017\062\020\067\021\106" +
    "\022\074\047\065\052\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\071\012\167\013\077" +
    "\014\075\015\076\016\063\017\062\020\067\021\106\022" +
    "\074\047\065\052\066\001\001\000\004\024\166\001\001" +
    "\000\002\001\001\000\004\024\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\071" +
    "\012\174\013\077\014\075\015\076\016\063\017\062\020" +
    "\067\021\106\022\074\047\065\052\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\071\014\177\015" +
    "\076\016\063\017\062\020\067\021\106\022\074\047\065" +
    "\052\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\071\005\205\006\210\007\204" +
    "\013\207\014\075\015\076\016\063\017\062\020\067\021" +
    "\106\022\074\047\065\052\066\001\001\000\002\001\001" +
    "\000\004\006\216\001\001\000\002\001\001\000\032\004" +
    "\071\007\213\013\207\014\075\015\076\016\063\017\062" +
    "\020\067\021\106\022\074\047\065\052\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\071\013\212" +
    "\014\075\015\076\016\063\017\062\020\067\021\106\022" +
    "\074\047\065\052\066\001\001\000\002\001\001\000\004" +
    "\006\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\071\012\165\013\077\014\075\015" +
    "\076\016\063\017\062\020\067\021\106\022\074\023\223" +
    "\024\163\047\065\052\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\071\012\234\013\077\014\075\015\076" +
    "\016\063\017\062\020\067\021\106\022\074\047\065\052" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\044\003\053\017\030\041\237\042\032\043\042\044" +
    "\045\045\043\046\046\047\035\050\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\044\003\053\017\030\041\243\042\032\043\042\044\045" +
    "\045\043\046\046\047\035\050\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\071\012\251\013\077\014" +
    "\075\015\076\016\063\017\062\020\067\021\106\022\074" +
    "\047\065\052\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\044\003\053\017\030" +
    "\041\255\042\032\043\042\044\045\045\043\046\046\047" +
    "\035\050\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\071\012\263\013\077\014\075\015\076\016\063" +
    "\017\062\020\067\021\106\022\074\047\065\052\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\071\012\165\013\077\014\075\015\076\016" +
    "\063\017\062\020\067\021\106\022\074\023\267\024\163" +
    "\047\065\052\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\012\026\276\032\275\001\001\000\002\001" +
    "\001\000\004\033\300\001\001\000\006\011\012\026\301" +
    "\001\001\000\002\001\001\000\004\033\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\311\001\001\000\002\001\001\000\010\011\012\026\276" +
    "\032\313\001\001\000\002\001\001\000\004\040\315\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // final ::= dictionary 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // final ::= sequence 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // final ::= LENGTH LEFTPAREN expression RIGHTPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // final ::= function_call 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // final ::= CHARLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // final ::= BOOLLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // final ::= FLOATLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // final ::= INTLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // final ::= LEFTPAREN expression RIGHTPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // final ::= accessor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("final",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exponent ::= final 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exponent",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exponent ::= MINUS exponent 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exponent",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= exponent 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= exponent POWER factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= term AND factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= term POWER factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= term DIVIDE factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= term MULTIPLY factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term ::= factor 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression LEFTBRACKET COLON expression RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression LEFTBRACKET expression COLON RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression LEFTBRACKET expression COLON expression RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression CONCAT term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression NOTEQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression EQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression GREATERTHANEQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression GREATERTHAN term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression LESSTHANEQUAL term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression LESSTHAN term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression IN term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression OR term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression MINUS term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression PLUS term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= term 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_clist2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist2",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_clist2 ::= COMMA expression expression_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist2",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_clist ::= expression_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_clist ::= expression expression_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expression_clist",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dict_list2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list2",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dict_list2 ::= COMMA keyvalpair dict_list2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list2",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dict_list ::= dict_list2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dict_list ::= keyvalpair dict_list2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict_list",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // keyvalpair ::= term COLON term 
            {
              Object RESULT =null;
		 System.out.println("keyval"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("keyvalpair",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dict ::= LEFTTBRACKET dict_list RIGHTTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dict",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dictionary ::= NT$0 dict 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("dictionary",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("parsed dictionary"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list ::= LEFTBRACKET expression_clist RIGHTBRACKET 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // accessor ::= accessor DOT ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("accessor",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // accessor ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("accessor",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sequence ::= list 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sequence ::= tuple 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sequence ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment ::= accessor ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("assignment",36, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // return ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("return",38, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("return",38, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // print_statement ::= PRINT expression_clist SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("print_statement",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // read_statement ::= READ ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("read_statement",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_call ::= ID LEFTPAREN expression_clist RIGHTPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // repeatuntil ::= REPEAT LEFTBRACE statement_list RIGHTBRACE UNTIL LEFTPAREN expression RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("repeatuntil",34, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while ::= WHILE LEFTPAREN expression RIGHTPAREN DO LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("while",35, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-7)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ifelse ::= IF LEFTPAREN expression RIGHTPAREN LEFTBRACE statement_list RIGHTBRACE ELSE LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ifelse",33, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-10)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= print_statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= read_statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= return 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= repeatuntil 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= while 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= ifelse 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= function_call 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement_list",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement_list",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // local_decl_list ::= var_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("local_decl_list",28, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // local_decl_list ::= local_decl_list var_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("local_decl_list",28, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= LEFTBRACE statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // block ::= LEFTBRACE local_decl_list statement_list RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("block",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter_clist2 ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist2",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_clist2 ::= COMMA var_type parameter_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist2",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_clist ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_clist ::= var_type parameter_clist2 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameter_clist",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_type ::= type 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_type",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_type ::= VOID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_type",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datatype_decl ::= TDEF ID COLON parameter_clist SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("datatype_decl",29, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_init ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_init",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_init ::= ASSIGN expression_clist 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_init",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_decl ::= var_type var_init SEMICOLON 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_decl",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_type ::= type ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("var_type",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_decl ::= FDEF function_type ID block 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_decl",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_decl ::= FDEF function_type ID LEFTPAREN parameter_clist RIGHTPAREN block 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("function_decl",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global_decl ::= function_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global_decl ::= var_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global_decl ::= datatype_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global_decl_list ::= global_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_decl_list ::= global_decl_list global_decl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("global_decl_list",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= block 
            {
              Object RESULT =null;
		 System.out.println("Parsing Complete"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",39, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= global_decl_list 
            {
              Object RESULT =null;
		 System.out.println("Parsing Complete"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",39, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= DICT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= TUPLE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= LIST 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

